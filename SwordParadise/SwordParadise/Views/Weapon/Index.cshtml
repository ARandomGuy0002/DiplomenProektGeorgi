@using SwordParadise.Models.Order;
@model IEnumerable<SwordParadise.Models.Weapon.WeaponIndexVM>

@{
    ViewData["Title"] = "Index";
}
<style>
    .gradient-custom {
        background: linear-gradient(to bottom, #fe90d2, #fefa3f);
    }

    * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
    }

    body {
        font-family: Arial, sans-serif;
        background-color: #f2f2f2;
    }

    .container {
        width: 80%;
        margin: 0 auto;
        padding: 20px;
        background-color: #fff;
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
    }

    h1 {
        text-align: center;
        margin-bottom: 20px;
    }

    .weapon-container {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
    }

    .weapon-card {
        width: 300px;
        margin: 10px;
        padding: 20px;
        background-color: #f2f2f2;
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
        text-align: center;
    }

        .weapon-card img {
            width: 200px;
            height: 200px;
            object-fit: contain;
            margin-bottom: 10px;
        }
</style>

<body class="gradient-custom">
    <h1>Weapons</h1>

    @if ((this.User.Identity.IsAuthenticated) && (this.User.IsInRole("Administrator")))
    {
        <p>
            <a asp-action="Create">Create New</a>
        </p>
    }
    <form asp-controller="Weapon" asp-action="Index" method="get">
        <p>
            Brand : <input type="text" name="searchStringBrandName" />
            Category : <input type="text" name="searchStringCategoryName" />
            <input type="submit" value="Filter" />
        </p>
    </form>

    <div class="weapon-container">
        @foreach (var item in Model)
        {
            <div class="weapon-card">
                <h2>@Html.DisplayFor(modelItem => item.WeaponName)</h2>
                <img src="@Html.DisplayFor(modelItem=> item.Picture)" alt="Image" />
                <p>@Html.DisplayFor(modelItem => item.Description)</p>
                <p>Quantity: @Html.DisplayFor(modelItem => item.Quantity)</p>
                <p>Price: @Html.DisplayFor(modelItem => item.Price)</p>
                <p>Discount: @Html.DisplayFor(modelItem => item.Discount) %</p>
                @if (this.User.Identity.IsAuthenticated)
                {
                    <div>
                        @await Html.PartialAsync("_OrderPartialView", new OrderConfirmVM
                {
                WeaponId = item.Id
                })
                    </div>
                }
                <div>
                    @if ((this.User.Identity.IsAuthenticated) && (this.User.IsInRole("Administrator")))
                    {
                        <a asp-action="Edit" asp-route-id="@item.Id">Edit</a>
                    }|
                    <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                    @if ((this.User.Identity.IsAuthenticated) && (this.User.IsInRole("Administrator")))
                    {
                        <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
                    }
                </div>
            </div>
        }
    </div>

    @section Scripts{
        @{
            await Html.RenderPartialAsync("_ValidationScriptsPartial");
        }
    }
</body>
