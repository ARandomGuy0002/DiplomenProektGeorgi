@using SwordParadise.Models.Order;
@model SwordParadise.Models.Weapon.WeaponDetailsVM

@{
    ViewData["Title"] = "Details";
}

<h1>Details</h1>
<style>
    .gradient-custom {
        background: linear-gradient(to bottom, red, black);
    }
    * {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

body {
  font-family: Arial, sans-serif;
  background-color: #f2f2f2;
}

    .body-container {
        max-width: 1160px;
        margin: 0 auto;
        padding: 20px;
        background-color: #fff;
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
    }
.container {
  width: 80%;
  margin: 0 auto;
  padding: 20px;
  background-color: #fff;
  border-radius: 10px;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
}

h1 {
  text-align: center;
  margin-bottom: 20px;
}

#reviews {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  margin-bottom: 20px;
}

.review {
  width: 48%;
  padding: 20px;
  background-color: #fff;
  border-radius: 5px;
  box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);
  transition: box-shadow 0.3s ease-in-out;
}

.review:hover {
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
}

.review:not(.active) {
  display: none;
}

.name {
  font-weight: bold;
  margin-bottom: 10px;
}

.stars {
  font-size: 20px;
  margin-bottom: 10px;
}

.star {
  color: #ffcc00;
}

.comment {
  font-size: 14px;
  line-height: 1.5;
  color: #555;
}

.arrows {
  display: flex;
  justify-content: space-between;
  margin-bottom: 20px;
}

.arrow {
  width: 50px;
  height: 50px;
  font-size: 20px;
  text-align: center;
  line-height: 50px;
  color: #fff;
  background-color: #333;
  border-radius: 50%;
  cursor: pointer;
  transition: background-color 0.3s ease-in-out;
}

.arrow:hover {
  background-color: #555;
}

.arrow:active {
  background-color: #777;
}

#reviews {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 20px;
}

.review {
  width: 400px;
  padding: 20px;
  background-color: #f8f8f8;
  border-radius: 10px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  text-align: left;
}

.review.active {
  border: 2px solid #0077FF;
}

.name {
  font-weight: bold;
}

.stars {
  display: flex;
  margin-bottom: 10px;
}

.star {
  color: #FFD700;
  font-size: 18px;
}

.comment {
  margin-top: 10px;
  font-style: italic;
}

  .review {
    width: 100%;
    margin-bottom: 20px;
  }

    .weapon-details-container {
        display: flex;
        justify-content: center;
        margin-top: 50px;
    }

    .weapon-details {
        display: flex;
        flex-direction: row;
        align-items: center;
        background-color: #f5f5f5;
        border-radius: 10px;
        box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.2);
        padding: 30px;
        width: 80%;
    }

    .weapon-image img {
        max-width: 400px;
    }

    .weapon-info {
        margin-left: 50px;
    }

    .weapon-name {
        font-size: 36px;
        margin-top: 0;
        margin-bottom: 20px;
    }

    .brand,
    .category,
    .quantity,
    .description {
        margin: 0;
        font-size: 18px;
    }

        .brand:before,
        .category:before,
        .quantity:before,
        .description:before {
            font-weight: bold;
            content: attr(data-display-name) ": ";
        }

    .price-section {
        margin-top: 20px;
    }

    .price {
        margin: 0;
        font-size: 24px;
        font-weight: bold;
    }

    .discount {
        margin: 0;
        font-size: 24px;
        color: #ff0000;
        font-weight: bold;
        margin-left: 10px;
    }

    .create-new-container {
        text-align: center;
    }

    .create-new-btn {
        background-color: darkred;
        color: white;
        text-decoration: none;
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        text-decoration: none;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        .create-new-btn:hover {
            background-color: indianred;
            text-decoration: none;
            color: black;
        }

        .create-new-btn:focus {
            outline: none;
        }

    .order-part {
        margin-top: 20px;
        text-align: center;
    }

        .order-part form {
            display: inline-block;
        }

        .order-part .btn-order {
            background-color: #00bcd4;
            color: white;
            padding: 10px 20px;
            border-radius: 5px;
            font-size: 16px;
            border: none;
            cursor: pointer;
        }

            .order-part .btn-order:hover {
                background-color: #008c9e;
            }

        .order-part .form-group {
            margin-bottom: 10px;
        }

        .order-part .form-control {
            display: inline-block;
            width: 60px;
            margin-left: 10px;
            margin-right: 10px;
        }

</style>
<body class="gradient-custom">
<div>
        <div class="weapon-details-container">
            <div class="weapon-details">
                <div class="weapon-image">
                    <img src="@Html.DisplayFor(model => model.Picture)" alt="Image" />
                </div>
                <div class="weapon-info">
                    <h2 class="weapon-name">@Html.DisplayFor(model => model.WeaponName)</h2>
                    <p class="brand">@Html.DisplayNameFor(model => model.BrandName): @Html.DisplayFor(model => model.BrandName)</p>
                    <p class="category">@Html.DisplayNameFor(model => model.CategoryName): @Html.DisplayFor(model => model.CategoryName)</p>
                    <p class="quantity">@Html.DisplayNameFor(model => model.Quantity): @Html.DisplayFor(model => model.Quantity)</p>
                    <p class="description">@Html.DisplayNameFor(model => model.Description): @Html.DisplayFor(model => model.Description)</p>
                    <div class="price-section">
                        <p class="price">@Html.DisplayNameFor(model => model.Price): @Html.DisplayFor(model => model.Price)$</p>
                        @if (Model.Discount > 0)
                        {
                            <p class="discount">@Html.DisplayNameFor(model => model.Discount): @Html.DisplayFor(model => model.Discount)%</p>
                        }
                    </div>
                    @if (this.User.Identity.IsAuthenticated)
                    {
                        @await Html.PartialAsync("_OrderPartialView", new OrderConfirmVM
                    {
                    WeaponId = Model.Id
                    })
                    }
                </div>
            </div>
        </div>
    <h1>Reviews</h1>
    <div id="reviews"></div>
    <div class="arrows">
        <div id="prev-arrow" class="arrow">&#10094;</div>
        <div id="next-arrow" class="arrow">&#10095;</div>
    </div><br />
    @if ((this.User.Identity.IsAuthenticated) && (this.User.IsInRole("Administrator")))
    {
            <a href="@Url.Action("Edit", new {id = Model.Id})" class="create-new-btn">Edit</a>
    }
    <a href="@Url.Action("index")" class="create-new-btn">Back to List</a>
</div>
</body>
<script>
    function generateRandomReview() {
        const names = ["John", "Jane", "Bob", "Samantha", "Emily", "Ethan", "Olivia", "Liam", "Sophia", "Noah", "Emma", "William", "Isabella", "James", "Mia"];
        const lastNames = ["Smith", "Johnson", "Williams", "Jones", "Brown", "Garcia", "Miller", "Davis", "Rodriguez", "Martinez", "Hernandez", "Lopez", "Gonzalez", "Perez", "Taylor", "Anderson", "Wilson", "Jackson", "Graham", "Nelson", "White", "Harris", "Moore", "Clark", "Lewis", "Walker", "Young", "Allen", "King", "Wright", "Scott", "Green", "Baker", "Adams", "Hall", "Rivera", "Mitchell", "Carter", "Thomas", "Lee", "Collins", "Roberts", "Phillips", "Edwards", "Turner", "Campbell", "Parker", "Evans", "Cooper", "Reed", "Stewart", "Morris", "Nguyen", "Murphy", "Cook", "Rogers", "Gray", "Hughes", "Flores", "Wood", "James", "Kim", "Watson", "Dean", "Morgan", "Reyes", "Bennett", "Ross", "Hill", "Powell", "Foster", "Perry", "Long", "Butler"];
        const comments = [
            "This product is amazing!",
            "I love this product so much.",
            "This product exceeded my expectations.",
            "I would definitely recommend this product.",
            "This is the best product I have ever purchased.",
            "This was a game changer for me!",
            "I'm blown away by the performance!",
            "This exceeded my expectations!",
            "Absolutely amazing!",
            "I've never felt more confident with a weapon!",
            "Such a fantastic addition to my collection!",
            "I can't believe how accurate this is!",
            "Incredible craftsmanship and quality!",
            "This has quickly become my go-to weapon!",
            "I am thoroughly impressed with this product!"

        ];
        const stars = Math.floor(Math.random() * 2) + 4;
        const name = names[Math.floor(Math.random() * names.length)];
        const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];
        const comment = comments[Math.floor(Math.random() * comments.length)];
        return { name, lastName, comment, stars };
    }

    let currentReviewIndex = 0;

    function generateReviews(numReviews) {
        const reviewsContainer = document.getElementById("reviews");

        for (let i = 0; i < numReviews; i++) {
            const review = generateRandomReview();
            const reviewContainer = document.createElement("div");
            reviewContainer.classList.add("review");

            const nameElement = document.createElement("span");
            nameElement.classList.add("name");
            nameElement.textContent = review.name + " " + review.lastName; // include last name in nameElement
            reviewContainer.appendChild(nameElement);

            const starsElement = document.createElement("span");
            starsElement.classList.add("stars");
            reviewContainer.appendChild(starsElement);
            for (let j = 0; j < review.stars; j++) {
                const starElement = document.createElement("span");
                starElement.classList.add("star");
                starElement.textContent = "★";
                starsElement.appendChild(starElement);
            }

            const commentElement = document.createElement("p");
            commentElement.classList.add("comment");
            commentElement.textContent = review.comment;
            reviewContainer.appendChild(commentElement);

            reviewsContainer.appendChild(reviewContainer);
        }

        const prevArrow = document.getElementById("prev-arrow");
        const nextArrow = document.getElementById("next-arrow");

        prevArrow.addEventListener("click", () => {
            const reviews = document.querySelectorAll(".review");
            reviews[currentReviewIndex].classList.remove("active");
            currentReviewIndex--;
            if (currentReviewIndex < 0) {
                currentReviewIndex = reviews.length - 1;
            }
            reviews[currentReviewIndex].classList.add("active");
        });

        nextArrow.addEventListener("click", () => {
            const reviews = document.querySelectorAll(".review");
            reviews[currentReviewIndex].classList.remove("active");
            currentReviewIndex++;
            if (currentReviewIndex >= reviews.length) {
                currentReviewIndex = 0;
            }
            reviews[currentReviewIndex].classList.add("active");
        });

        const reviews = document.querySelectorAll(".review");
        reviews[currentReviewIndex].classList.add("active");
    }

    generateReviews(5);
</script>
@section Scripts{
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
