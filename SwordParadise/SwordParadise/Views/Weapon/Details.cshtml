@model SwordParadise.Models.Weapon.WeaponDetailsVM

@{
    ViewData["Title"] = "Details";
}

<h1>Details</h1>
<style>
    * {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

body {
  font-family: Arial, sans-serif;
  background-color: #f2f2f2;
}

.container {
  width: 80%;
  margin: 0 auto;
  padding: 20px;
  background-color: #fff;
  border-radius: 10px;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
}

h1 {
  text-align: center;
  margin-bottom: 20px;
}

#reviews {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  margin-bottom: 20px;
}

.review {
  width: 48%;
  padding: 20px;
  background-color: #fff;
  border-radius: 5px;
  box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);
  transition: box-shadow 0.3s ease-in-out;
}

.review:hover {
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
}

.review:not(.active) {
  display: none;
}

.name {
  font-weight: bold;
  margin-bottom: 10px;
}

.stars {
  font-size: 20px;
  margin-bottom: 10px;
}

.star {
  color: #ffcc00;
}

.comment {
  font-size: 14px;
  line-height: 1.5;
  color: #555;
}

.arrows {
  display: flex;
  justify-content: space-between;
  margin-bottom: 20px;
}

.arrow {
  width: 50px;
  height: 50px;
  font-size: 20px;
  text-align: center;
  line-height: 50px;
  color: #fff;
  background-color: #333;
  border-radius: 50%;
  cursor: pointer;
  transition: background-color 0.3s ease-in-out;
}

.arrow:hover {
  background-color: #555;
}

.arrow:active {
  background-color: #777;
}

#reviews {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 20px;
}

.review {
  width: 400px;
  padding: 20px;
  background-color: #f8f8f8;
  border-radius: 10px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  text-align: left;
}

.review.active {
  border: 2px solid #0077FF;
}

.name {
  font-weight: bold;
}

.stars {
  display: flex;
  margin-bottom: 10px;
}

.star {
  color: #FFD700;
  font-size: 18px;
}

.comment {
  margin-top: 10px;
  font-style: italic;
}

  .review {
    width: 100%;
    margin-bottom: 20px;
  }
}
</style>
<div>
    <h4>WeaponDetailsVM</h4>
    <hr />
    <dl class="row">
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.WeaponName)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.WeaponName)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.BrandName)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.BrandName)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.CategoryName)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.CategoryName)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Picture)
        </dt>
        <dd class="col-sm-10">
            <img src="@Html.DisplayFor(model => model.Picture)" alt="Image" width="100" />
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Quantity)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Quantity)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Description)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Description)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Price)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Price)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Discount)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Discount)
        </dd>
    </dl>
    <h1>Reviews</h1>
    <div id="reviews"></div>
    <div class="arrows">
        <div id="prev-arrow" class="arrow">&#10094;</div>
        <div id="next-arrow" class="arrow">&#10095;</div>
    </div><br />
    @if ((this.User.Identity.IsAuthenticated) && (this.User.IsInRole("Administrator")))
    {
        <a asp-action="Edit" asp-route-id="@Model.Id">Edit</a>
    }|
    <a asp-action="Index">Back to List</a>
</div>
<script>
    function generateRandomReview() {
        const names = ["John", "Jane", "Bob", "Samantha", "Emily", "Ethan", "Olivia", "Liam", "Sophia", "Noah", "Emma", "William", "Isabella", "James", "Mia"];
        const comments = [
            "This product is amazing!",
            "I love this product so much.",
            "This product exceeded my expectations.",
            "I would definitely recommend this product.",
            "This is the best product I have ever purchased.",
            "This was a game changer for me!",
            "I'm blown away by the performance!",
            "This exceeded my expectations!",
            "Absolutely amazing!",
            "I've never felt more confident with a weapon!",
            "Such a fantastic addition to my collection!",
            "I can't believe how accurate this is!",
            "Incredible craftsmanship and quality!",
            "This has quickly become my go-to weapon!",
            "I am thoroughly impressed with this product!"

        ];
        const stars = Math.floor(Math.random() * 2) + 4;
        const name = names[Math.floor(Math.random() * names.length)];
        const comment = comments[Math.floor(Math.random() * comments.length)];
        return { name, comment, stars };
    }

    let currentReviewIndex = 0;

    function generateReviews(numReviews) {
        const reviewsContainer = document.getElementById("reviews");

        for (let i = 0; i < numReviews; i++) {
            const review = generateRandomReview();
            const reviewContainer = document.createElement("div");
            reviewContainer.classList.add("review");

            const nameElement = document.createElement("span");
            nameElement.classList.add("name");
            nameElement.textContent = review.name;
            reviewContainer.appendChild(nameElement);

            const starsElement = document.createElement("span");
            starsElement.classList.add("stars");
            reviewContainer.appendChild(starsElement);
            for (let j = 0; j < review.stars; j++) {
                const starElement = document.createElement("span");
                starElement.classList.add("star");
                starElement.textContent = "★";
                starsElement.appendChild(starElement);
            }

            const commentElement = document.createElement("p");
            commentElement.classList.add("comment");
            commentElement.textContent = review.comment;
            reviewContainer.appendChild(commentElement);

            reviewsContainer.appendChild(reviewContainer);
        }

        const prevArrow = document.getElementById("prev-arrow");
        const nextArrow = document.getElementById("next-arrow");

        prevArrow.addEventListener("click", () => {
            const reviews = document.querySelectorAll(".review");
            reviews[currentReviewIndex].classList.remove("active");
            currentReviewIndex--;
            if (currentReviewIndex < 0) {
                currentReviewIndex = reviews.length - 1;
            }
            reviews[currentReviewIndex].classList.add("active");
        });

        nextArrow.addEventListener("click", () => {
            const reviews = document.querySelectorAll(".review");
            reviews[currentReviewIndex].classList.remove("active");
            currentReviewIndex++;
            if (currentReviewIndex >= reviews.length) {
                currentReviewIndex = 0;
            }
            reviews[currentReviewIndex].classList.add("active");
        });

        const reviews = document.querySelectorAll(".review");
        reviews[currentReviewIndex].classList.add("active");
    }

    generateReviews(5);
</script>
@section Scripts{
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
